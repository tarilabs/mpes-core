package net.tarilabs.mpes

import net.tarilabs.mpes.CamelBootstrap;
import net.tarilabs.mpes.model.*;
import com.rapplogic.xbee.api.XBeeAddress64;
import com.rapplogic.xbee.api.zigbee.ZNetRxIoSampleResponse;

import function net.tarilabs.camelxbeeapi.XBeeAPIUtils.addressAsMacFormat;

declare MpesSentence
	@role(event)
	@expires(60m)
end

declare ZNetRxIoSampleResponse
	@role(event)
	@expires(60m)
end

function void putOnCamel(String route, Object obj) {
	CamelBootstrap cb = (CamelBootstrap) javax.naming.InitialContext.doLookup("java:global/mpes-core/CamelBootstrap");
	if (cb != null) {
		cb.getProducerTemplate().sendBody(route, obj);
	}
}

/** 
 * Filter01
 * Remove everything which is not from the XBee 00:13:A2:00:40:68:E0:95
 *
 */
rule "Filter01"
no-loop
salience 1000
dialect "mvel" 
    when
        $o : ZNetRxIoSampleResponse(
        		eval( ! addressAsMacFormat(remoteAddress64).equals("00:13:A2:00:40:68:E0:95") ) 
        	 )
    then
       	retract($o);
end

/**
 * Filter02
 * Remove non-analog reading packets from XBee 00:13:A2:00:40:68:E0:95
 *
 */
rule "Filter02"
no-loop 
salience 1000
dialect "mvel" 
    when
        $o : ZNetRxIoSampleResponse(
				eval( addressAsMacFormat(remoteAddress64).equals("00:13:A2:00:40:68:E0:95") ) , 
				containsAnalog == false
			 )
    then
       	retract($o);
end

/**
 * Create01
 * Create a CurStatusPrevStatus() object for the Home Toothbrush
 */
rule "Create01"
no-loop 
dialect "mvel" 
when
	not ( CurStatusPrevStatus( id == "Home Toothbrush" ) )
then
	CurStatusPrevStatus cp = new CurStatusPrevStatus("Home Toothbrush");
	insert(cp);
end

query "CurStatusPrevStatus Home Toothbrush"
	cp : CurStatusPrevStatus( id == "Home Toothbrush" )
end

/*
 * Detect Docked
 * The analog sensor reading for docked is about 1023.
 * The rule shall detect the Home Toothbrush as docked when the average is above 950 including at least 3 analog sensor reading.
 */
rule "Detect Docked"
no-loop 
when
    accumulate ( ZNetRxIoSampleResponse( containsAnalog == true, $analog1 : analog1 ) over window:length( 3 );
    			 $avg : average( $analog1 ),
    			 $count : count( $analog1 );  
    			 $avg > 950 , $count == 3
    )
    $cp : CurStatusPrevStatus( id == "Home Toothbrush" , curStatus != "DOCKED")
then
	$cp.shiftCurIntoPrev();
    $cp.setCurStatus("DOCKED");
    $cp.setCurStatusTs(drools.getWorkingMemory().getSessionClock().getCurrentTime());
    update($cp);
end

/*
 * Detect UnDocked
 * The analog sensor reading for docked is about 181.
 * The rule shall detect the Home Toothbrush as UNdocked when the average is less than 250 including at least 3 analog sensor reading.
 */
rule "Detect UnDocked"
no-loop 
when
    accumulate ( ZNetRxIoSampleResponse( containsAnalog == true, $analog1 : analog1 ) over window:length( 3 );
    			 $avg : average( $analog1 ),  
    			 $count : count( $analog1 );
    			 $avg < 250 , $count == 3
    )
    $cp : CurStatusPrevStatus( id == "Home Toothbrush" , curStatus != "UNDOCKED")
then
	$cp.shiftCurIntoPrev();
    $cp.setCurStatus("UNDOCKED");
    $cp.setCurStatusTs(drools.getWorkingMemory().getSessionClock().getCurrentTime());
    update($cp);
end

/**
 * TODO rewrite this rule be based on DOCKED and UNDOCKED as CEP Drools Event.
 *
 * Home Toothbrush Session
 * Detect a session of use for the Home Toothbrush when a DOCKED follows an UNDOCKED endured for at least 30sec.
 */
rule "Home Toothbrush Session"
no-loop
when
	$cp : CurStatusPrevStatus( id == "Home Toothbrush" ,
							   prevStatus == "UNDOCKED" , curStatus == "DOCKED" ,
							   curStatusTs - prevStatusTs >= 30000
						     )
then
	long millis = $cp.getCurStatusTs() - $cp.getPrevStatusTs() - 8000; // assume 8sec of non-brushing activity
	long mins = millis/1000/60;
	long secs = (millis/1000) % 60;
	long oscillations = (long) ( (7600.0/60/1000) * millis );
	MpesSentence ms = new MpesSentence("Home Toothbrush", 
			"I just used my toothbrush! Total time: "
			+( (mins>0)?mins+"m":"" )
			+secs+"s "
			+"Oscillations: "+oscillations);
	insert(ms);
	putOnCamel("direct:MpesSentence", ms);
end

/**
 * Just a general query for MpesSentence in the WorkingMemory
 */
query "MpesSentence for area a" (String a)
	ms : MpesSentence( area == a )
end